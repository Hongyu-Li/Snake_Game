{"ast":null,"code":"import Body from './Body';\nimport { CELL_WIDTH, CELL_HEIGHT } from './constant';\nexport let DIRECTION;\n\n(function (DIRECTION) {\n  DIRECTION[DIRECTION[\"LEFT\"] = 0] = \"LEFT\";\n  DIRECTION[DIRECTION[\"UP\"] = 1] = \"UP\";\n  DIRECTION[DIRECTION[\"RIGHT\"] = 2] = \"RIGHT\";\n  DIRECTION[DIRECTION[\"DOWN\"] = 3] = \"DOWN\";\n})(DIRECTION || (DIRECTION = {}));\n\nexport class Snake {\n  constructor() {\n    this.body = [];\n    this.direction = void 0;\n\n    this.turn = () => {\n      const head = this.body[0];\n      const x = head.x,\n            y = head.y;\n\n      switch (this.direction) {\n        case DIRECTION.RIGHT:\n          this.body[0].move(x + CELL_WIDTH, y);\n          break;\n\n        case DIRECTION.LEFT:\n          this.body[0].move(x - CELL_WIDTH, y);\n          break;\n\n        case DIRECTION.DOWN:\n          this.body[0].move(x, y + CELL_HEIGHT);\n          break;\n\n        case DIRECTION.UP:\n          this.body[0].move(x, y - CELL_HEIGHT);\n          break;\n      }\n    };\n\n    this.body.push(new Body(0, 0));\n    this.direction = DIRECTION.DOWN;\n  }\n\n  extend() {\n    const last = this.body[this.body.length - 1];\n    this.body.push(new Body(last.x, last.y));\n  }\n\n  move() {\n    for (let i = this.body.length - 1; i > 0; --i) {\n      this.body[i].x = this.body[i - 1].x;\n      this.body[i].y = this.body[i - 1].y;\n    }\n\n    this.turn();\n  }\n\n}","map":{"version":3,"sources":["/Users/amuro/demo/src/Snake.ts"],"names":["Body","CELL_WIDTH","CELL_HEIGHT","DIRECTION","Snake","constructor","body","direction","turn","head","x","y","RIGHT","move","LEFT","DOWN","UP","push","extend","last","length","i"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,YAAxC;AACA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAIZ,OAAO,MAAMC,KAAN,CAAY;AAIfC,EAAAA,WAAW,GAAG;AAAA,SAHdC,IAGc,GAHM,EAGN;AAAA,SAFdC,SAEc;;AAAA,SAUdC,IAVc,GAUP,MAAI;AACP,YAAMC,IAAI,GAAG,KAAKH,IAAL,CAAU,CAAV,CAAb;AADO,YAEAI,CAFA,GAESD,IAFT,CAEAC,CAFA;AAAA,YAEGC,CAFH,GAESF,IAFT,CAEGE,CAFH;;AAGP,cAAO,KAAKJ,SAAZ;AACI,aAAKJ,SAAS,CAACS,KAAf;AAAsB,eAAKN,IAAL,CAAU,CAAV,EAAaO,IAAb,CAAkBH,CAAC,GAACT,UAApB,EAAgCU,CAAhC;AAAoC;;AAC1D,aAAKR,SAAS,CAACW,IAAf;AAAqB,eAAKR,IAAL,CAAU,CAAV,EAAaO,IAAb,CAAkBH,CAAC,GAACT,UAApB,EAAgCU,CAAhC;AAAoC;;AACzD,aAAKR,SAAS,CAACY,IAAf;AAAqB,eAAKT,IAAL,CAAU,CAAV,EAAaO,IAAb,CAAkBH,CAAlB,EAAqBC,CAAC,GAACT,WAAvB;AAAqC;;AAC1D,aAAKC,SAAS,CAACa,EAAf;AAAmB,eAAKV,IAAL,CAAU,CAAV,EAAaO,IAAb,CAAkBH,CAAlB,EAAqBC,CAAC,GAACT,WAAvB;AAAqC;AAJ5D;AAMH,KAnBa;;AACV,SAAKI,IAAL,CAAUW,IAAV,CAAe,IAAIjB,IAAJ,CAAS,CAAT,EAAW,CAAX,CAAf;AACA,SAAKO,SAAL,GAAiBJ,SAAS,CAACY,IAA3B;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,KAAKb,IAAL,CAAU,KAAKA,IAAL,CAAUc,MAAV,GAAiB,CAA3B,CAAb;AACA,SAAKd,IAAL,CAAUW,IAAV,CAAe,IAAIjB,IAAJ,CAASmB,IAAI,CAACT,CAAd,EAAiBS,IAAI,CAACR,CAAtB,CAAf;AACH;;AAaDE,EAAAA,IAAI,GAAG;AACH,SAAI,IAAIQ,CAAC,GAAG,KAAKf,IAAL,CAAUc,MAAV,GAAmB,CAA/B,EAAkCC,CAAC,GAAG,CAAtC,EAAyC,EAAEA,CAA3C,EAA8C;AAC1C,WAAKf,IAAL,CAAUe,CAAV,EAAaX,CAAb,GAAiB,KAAKJ,IAAL,CAAUe,CAAC,GAAC,CAAZ,EAAeX,CAAhC;AACA,WAAKJ,IAAL,CAAUe,CAAV,EAAaV,CAAb,GAAiB,KAAKL,IAAL,CAAUe,CAAC,GAAC,CAAZ,EAAeV,CAAhC;AACH;;AACD,SAAKH,IAAL;AACH;;AA/Bc","sourcesContent":["import Body from './Body'\nimport { CELL_WIDTH, CELL_HEIGHT } from './constant';\nexport enum DIRECTION {\n    LEFT,UP,RIGHT,DOWN\n}\n\nexport class Snake {\n    body: Array<Body> = []\n    direction: DIRECTION;\n    \n    constructor() {\n        this.body.push(new Body(0,0));\n        this.direction = DIRECTION.DOWN;\n    }\n\n    extend() {\n        const last = this.body[this.body.length-1]\n        this.body.push(new Body(last.x, last.y));\n    }\n\n    turn = ()=>{\n        const head = this.body[0];\n        const {x, y}  = head;\n        switch(this.direction) {\n            case DIRECTION.RIGHT: this.body[0].move(x+CELL_WIDTH, y); break;\n            case DIRECTION.LEFT: this.body[0].move(x-CELL_WIDTH, y); break;\n            case DIRECTION.DOWN: this.body[0].move(x, y+CELL_HEIGHT); break;\n            case DIRECTION.UP: this.body[0].move(x, y-CELL_HEIGHT); break;\n        }\n    }\n\n    move() {\n        for(let i = this.body.length - 1; i > 0; --i) {\n            this.body[i].x = this.body[i-1].x;\n            this.body[i].y = this.body[i-1].y;\n        }\n        this.turn();\n    }\n\n}"]},"metadata":{},"sourceType":"module"}